from __future__ import annotations

import re
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from modules.config.config import Config
    from modules.dat.process_dat import DatNode
    from modules.titletools import Removes

from modules.titletools import TraceTools
from modules.utils import eprint


def filter_languages(
    processed_titles: dict[str, set[DatNode]], config: Config, removed_titles: Removes
) -> dict[str, set[DatNode]]:
    """
    Filters titles in a dict of DatNodes for languages as defined by the user.

    Args:
        processed_titles (dict[str, set[DatNode]]): A work in progress dictionary of
            DatNodes, originally populated from the input DAT and actively being worked on
            by Retool.

        config (Config): The Retool config object.

        removed_titles (Removes): The Retool removes object, which contains and
            categorizes all the titles that have been removed from consideration. It is
            used for recovering titles defined by user includes, stats, and other output
            files generated by Retool.

    Returns:
        dict (dict[str, set[DatNode]]): A dictionary of DatNodes with titles filtered
        based on languages.
    """
    eprint('• Removing titles without specified languages... ')

    # Set up title tracking
    report_on_match: bool = False

    if config.user_input.trace:
        for titles in processed_titles.values():
            report_on_match = TraceTools.trace_enable(set(titles), config.user_input.trace)

            if report_on_match:
                break

    if report_on_match:
        eprint('\n\nStage: Filter languages', level='warning')

    temp_dict = processed_titles.copy()
    supported_languages_all: set[DatNode] = set()
    languages_count: set[str] = set()

    # Check if a system config is in play for languages
    language_order: list[str] = []

    if config.languages_filter:
        language_order = config.language_order_user

        if config.system_language_order_user:
            if {'override': 'true'} in config.system_language_order_user:
                language_order = [
                    str(x) for x in config.system_language_order_user if 'override' not in x
                ]

                if not config.system_languages_user_found:
                    # If there's a global language order, assume the user's preference for them and grab those languages.
                    if config.language_order_user:
                        language_order.extend(
                            [x for x in config.language_order_user if x not in language_order]
                        )

                    # Now add the rest of the languages in
                    language_order.extend(
                        [x for x in config.languages.values() if x not in language_order]
                    )
    else:
        language_order = config.region_order_languages_user

    for group_name, titles in temp_dict.items():
        if config.user_input.trace:
            report_on_match = TraceTools.trace_enable(set(titles), config.user_input.trace)

        supported_languages: set[DatNode] = set()

        for title in titles:
            # Add titles with unknown languages
            if not title.languages:
                if title not in supported_languages:
                    supported_languages.add(title)
                    # Superset titles can be in multiple groups, so deduping needs to be done
                    # for exclude stats
                    if not any(d.full_name == title.full_name for d in supported_languages_all):
                        languages_count.add(title.full_name)
                    continue

            # Add titles that support user-defined languages
            for language_code in language_order:
                for language in title.languages:
                    if re.search(language_code, language):
                        if title not in supported_languages:
                            supported_languages.add(title)

        report_titles: set[DatNode] = {
            x for x in processed_titles[group_name] if x not in supported_languages
        }

        if report_on_match and report_titles:
            TraceTools.trace_title(
                'REF0049', [', '.join(language_order)], report_titles, keep_remove=False
            )

        # Superset titles can be in multiple groups, so deduping needs to be done for exclude stats
        languages_count = languages_count | {
            x.full_name for x in processed_titles[group_name] if x not in supported_languages
        }

        # Track removed titles
        for title in [x for x in processed_titles[group_name] if x not in supported_languages]:
            title.exclude_reason = 'Language remove'
            removed_titles.language_removes.add(title)

        processed_titles[group_name] = set(supported_languages)

        # Clean up empty groups
        if not processed_titles[group_name]:
            del processed_titles[group_name]

    # Add removed titles due to language filters to the stats
    config.stats.languages_count = len(languages_count)

    eprint('• Removing titles without specified languages... done.', overwrite=True)

    return processed_titles
