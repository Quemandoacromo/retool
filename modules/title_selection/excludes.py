from __future__ import annotations

import re
from re import Pattern
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from modules.config.config import Config
    from modules.dat.process_dat import DatNode
    from modules.titletools import Removes

from modules.title_selection.overrides_post_filters import user_override_post_filter_match
from modules.titletools import TraceTools
from modules.utils import eprint, pattern2string


def excludes(
    processed_titles: dict[str, set[DatNode]], config: Config, removed_titles: Removes
) -> dict[str, set[DatNode]]:
    """
    Works through a dict of DatNodes and removes nodes that match user criteria.

    Args:
        processed_titles (dict[str, set[DatNode]]): A work in progress dictionary of
            DatNodes, originally populated from the input DAT and actively being worked on
            by Retool.

        config (Config): The Retool config object.

        removed_titles (Removes): The Retool removes object, which contains and
            categorizes all the titles that have been removed from consideration. It is
            used for recovering titles defined by user includes, stats, and other output
            files generated by Retool.

    Returns:
        dict (dict[str, set[DatNode]]): A dictionary of DatNodes with titles excluded
        based on user criteria.
    """
    eprint('â€¢ Applying category and user excludes... ')

    # Set up title tracking
    report_on_match: bool = False

    if config.user_input.trace:
        for titles in processed_titles.values():
            report_on_match = TraceTools.trace_enable(titles, config.user_input.trace)

            if report_on_match:
                break

    exclude_categories: list[str] = []
    exclude_regexes: set[tuple[Pattern[str], str]] = set()

    # Populate all the user-defined exclusions
    if config.user_input.no_add_ons:
        exclude_categories.append('Add-Ons')
    if config.user_input.no_aftermarket:
        exclude_regexes.add((config.regex.aftermarket, 'Aftermarket'))
    if config.user_input.no_applications:
        exclude_categories.append('Applications')
        exclude_regexes.add((config.regex.programs, 'Applications'))
    if config.user_input.no_audio:
        exclude_categories.append('Audio')
    if config.user_input.no_bad_dumps:
        exclude_regexes.add((config.regex.bad, 'Bad Dumps'))
    if config.user_input.no_bios:
        exclude_categories.append('BIOS')
        exclude_regexes.add((config.regex.bios, 'BIOS'))
    if config.user_input.no_bonus_discs:
        exclude_categories.append('Bonus Discs')
    if config.user_input.no_coverdiscs:
        exclude_categories.append('Coverdiscs')
    if config.user_input.no_demos:
        exclude_categories.append('Demos')
        for demo in config.regex.demos:
            exclude_regexes.add((demo, 'Demos'))
    if config.user_input.no_educational:
        exclude_categories.append('Educational')
    if config.user_input.no_games:
        exclude_categories.append('Games')
    if config.user_input.no_manuals:
        exclude_categories.append('Manuals')
        exclude_regexes.add((config.regex.manuals, 'Manuals'))
    if config.user_input.no_multimedia:
        exclude_categories.append('Multimedia')
        exclude_regexes.add((config.regex.multimedia, 'Multimedia'))
    if config.user_input.no_pirate:
        exclude_categories.append('Pirate')
        exclude_regexes.add((config.regex.pirate, 'Pirate'))
    if config.user_input.no_preproduction:
        exclude_categories.append('Preproduction')
        for preproduction in config.regex.preproduction:
            exclude_regexes.add((preproduction, 'Preproduction'))
    if config.user_input.no_promotional:
        exclude_categories.append('Promotional')
        exclude_regexes.add((config.regex.promotional, 'Promotional'))
    if config.user_input.no_unlicensed:
        exclude_categories.append('Unlicensed')
        exclude_regexes.add((config.regex.unlicensed, 'Unlicensed'))
    if config.user_input.no_video:
        exclude_categories.append('Video')
        for video in config.regex.video:
            exclude_regexes.add((video, 'Video'))

    exclude_titles: set[DatNode] = set()
    exclude_related: set[DatNode] = set()
    flattened_titles: set[DatNode] = {
        title for group in processed_titles.values() for title in group
    }

    if report_on_match:
        if config.global_exclude or config.system_exclude or exclude_categories or exclude_regexes:
            eprint('Stage: Exclusions', level='heading')

    for title in flattened_titles:
        if config.user_input.trace:
            report_on_match = TraceTools.trace_enable(flattened_titles, config.user_input.trace)

        exclude_found = False

        # Category excludes
        for exclude_category in exclude_categories:
            if exclude_category in title.categories:
                if report_on_match and pattern2string(
                    re.compile(config.user_input.trace), title.full_name
                ):
                    TraceTools.trace_title(
                        'REF0042', [', '.join(title.categories)], {title}, keep_remove=False
                    )

                exclude_titles.add(title)
                title.exclude_reason = f'Category exclude, {exclude_category}'

                # Add the title to the removes object
                category_remove_name = f'{exclude_category.lower()}_removes'.replace(
                    ' ', '_'
                ).replace('-', '_')
                category_removes = getattr(removed_titles, category_remove_name)
                category_removes.add(title)
                setattr(removed_titles, category_remove_name, category_removes)

                exclude_found = True
                break

        if exclude_found:
            continue

        # Regex excludes
        for exclude_regex in exclude_regexes:
            regex_pattern: Pattern[str] = exclude_regex[0]
            exclude_category = exclude_regex[1]

            if pattern2string(re.compile(regex_pattern), title.full_name):
                if report_on_match and pattern2string(
                    re.compile(config.user_input.trace), title.full_name
                ):
                    TraceTools.trace_title(
                        'REF0044',
                        [
                            str(regex_pattern)
                            .replace('re.compile(', '')
                            .replace(', re.IGNORECASE)', '')
                        ],
                        {title},
                        keep_remove=False,
                    )

                exclude_titles.add(title)
                title.exclude_reason = f'Category exclude, {exclude_category}'

                # Add the title to the removes object
                category_remove_name = f'{exclude_category.lower()}_removes'.replace(
                    ' ', '_'
                ).replace('-', '_')
                category_removes = getattr(removed_titles, category_remove_name)
                category_removes.add(title)
                setattr(removed_titles, category_remove_name, category_removes)

                exclude_found = True
                break

        if exclude_found:
            continue

        # MIA excludes
        if config.user_input.no_mia:
            if title.is_mia:
                if report_on_match:
                    TraceTools.trace_title('REF0062', [], {title}, keep_remove=False)

                exclude_titles.add(title)
                title.exclude_reason = 'Known MIA title'
                removed_titles.mia_removes.add(title)
                continue

        # Override excludes
        if not config.user_input.no_overrides:
            if config.system_exclude:
                if user_override_post_filter_match(
                    title, config.system_exclude
                ) and not user_override_post_filter_match(title, config.system_include):
                    if report_on_match:
                        TraceTools.trace_title('REF0045', [], {title}, keep_remove=False)

                    exclude_titles.add(title)
                    title.exclude_reason = 'User system exclude'
                    removed_titles.system_excludes.add(title)
                elif user_override_post_filter_match(
                    title, config.system_exclude
                ) and user_override_post_filter_match(title, config.system_include):
                    if report_on_match:
                        TraceTools.trace_title('REF0050', [], {title}, keep_remove=False)

            if config.global_exclude:
                if (
                    user_override_post_filter_match(title, config.global_exclude)
                    and not user_override_post_filter_match(title, config.global_include)
                    and not user_override_post_filter_match(title, config.system_include)
                ):
                    if report_on_match:
                        TraceTools.trace_title('REF0046', [], {title}, keep_remove=False)

                    exclude_titles.add(title)
                    title.exclude_reason = 'User global exclude'
                    removed_titles.global_excludes.add(title)
                elif user_override_post_filter_match(
                    title, config.global_exclude
                ) and user_override_post_filter_match(title, config.global_include):
                    if report_on_match:
                        TraceTools.trace_title('REF0051', [], {title}, keep_remove=False)
                elif user_override_post_filter_match(
                    title, config.global_exclude
                ) and user_override_post_filter_match(title, config.system_include):
                    if report_on_match:
                        TraceTools.trace_title('REF0052', [], {title}, keep_remove=False)

    # Find related exclusions based on overrides
    if not config.user_input.no_overrides:
        for title in exclude_titles:
            if title.exclude_include_related:
                for related_title in processed_titles[title.group_name]:
                    if title.exclude_reason == 'User system exclude':
                        related_title.exclude_reason = 'Related to user system excludes'
                        removed_titles.system_excludes.add(related_title)
                    elif title.exclude_reason == 'User global exclude':
                        related_title.exclude_reason = 'Related to user global excludes'
                        removed_titles.global_excludes.add(related_title)

                    exclude_related.add(related_title)

    # Remove the titles
    exclude_titles = exclude_titles | exclude_related

    for title in exclude_titles:
        if title in processed_titles[title.group_name]:
            processed_titles[title.group_name].remove(title)

        if not processed_titles[title.group_name]:
            del processed_titles[title.group_name]

    eprint('â€¢ Applying category and user excludes... done.', overwrite=True)

    return processed_titles
